[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "Chapter_1_Challenge.html",
    "href": "Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/ml.html",
    "href": "content/01_journal/ml.html",
    "title": "Supervised ML- Regression (I)",
    "section": "",
    "text": "First, we load some libraries\n\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\nlibrary(workflows)\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\nWe load the data\n\nbike_features_tbl <- readRDS(\"../../bike_features_tbl.rds\")\nglimpse(bike_features_tbl)\n\n#> Rows: 231\n#> Columns: 67\n#> $ bike_id                     <dbl> 2875, 2873, 2874, 2876, 2877, 2225, 2091, …\n#> $ model                       <chr> \"Aeroad CF SL Disc 8.0 Di2\", \"Aeroad CF SL…\n#> $ model_year                  <dbl> 2020, 2020, 2020, 2020, 2020, 2019, 2019, …\n#> $ frame_material              <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"c…\n#> $ weight                      <dbl> 7.60, 7.27, 7.10, 7.73, 7.83, 6.80, 6.80, …\n#> $ price                       <dbl> 4579, 6919, 6429, 5069, 3609, 6139, 5359, …\n#> $ category_1                  <chr> \"Road\", \"Road\", \"Road\", \"Road\", \"Road\", \"R…\n#> $ category_2                  <chr> \"Race\", \"Race\", \"Race\", \"Race\", \"Race\", \"R…\n#> $ category_3                  <chr> \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroad\", \"A…\n#> $ gender                      <chr> \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"u…\n#> $ url                         <chr> \"https://www.canyon.com/en-de/road-bikes/r…\n#> $ Frame                       <chr> \"Canyon Aeroad CF SL Disc\", \"Canyon Aeroad…\n#> $ Fork                        <chr> \"Canyon FK0041 CF SLX Disc\", \"Canyon FK004…\n#> $ `Rear Derailleur`           <chr> \"Shimano Ultegra Di2 R8050 SS\", \"SRAM RED …\n#> $ `Front Derailleur`          <chr> \"Shimano Ultegra Di2 R8050\", \"SRAM RED eTa…\n#> $ Cassette                    <chr> \"Shimano Ultegra R8000, 11-speed, 11-28T\",…\n#> $ Crank                       <chr> \"Shimano Ultegra R8000\", \"SRAM RED D1\", \"S…\n#> $ `Bottom bracket`            <chr> \"Shimano Pressfit BB72\", \"SRAM Pressfit RE…\n#> $ `Thru Axle`                 <chr> \"Canyon Thru Axle\", \"Canyon Thru Axle\", \"C…\n#> $ Cockpit                     <chr> \"Canyon H36 Aerocockpit CF\", \"Canyon H36 A…\n#> $ Saddle                      <chr> \"Selle Italia SLR\", \"Selle Italia SLR\", \"S…\n#> $ Seatpost                    <chr> \"Canyon S27 Aero VCLS CF\", \"Canyon S27 Aer…\n#> $ Pedals                      <chr> \"None included\", \"None included\", \"None in…\n#> $ `Derailleur hanger`         <chr> \"Shop Derailleur Hanger GP0211-01\", \"Shop …\n#> $ Battery                     <chr> \"\", \"SRAM eTap Powerpack\", \"\", \"SRAM eTap …\n#> $ Brake                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Shift Lever`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano Di2 Remot…\n#> $ Chain                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano CN-HG901 …\n#> $ Stem                        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon V13\", …\n#> $ Handlebar                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon H16 Ae…\n#> $ Headset                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Motor                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Battery Charger`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Flat Pedals`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Chainguard                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Aero Bar`                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake Lever / Master`      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Wheel Tire System`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Suspension Fork`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Disc Brake`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Grips                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Chainring                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Display                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Modeswitch                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Rear Shock`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Light                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Fender                      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Bike Racks`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake 1`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou…\n#> $ `Brake 2`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou…\n#> $ `Shift-/ Brake Lever 1`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR…\n#> $ `Shift-/ Brake Lever 2`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR…\n#> $ `Wheel 1`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1…\n#> $ `Wheel 2`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1…\n#> $ `Tyre 1`                    <chr> \"Continental Grand Prix 5000 / Attack  23 …\n#> $ `Tyre 2`                    <chr> \"Continental Grand Prix 5000, 25 mm\", \"Con…\n#> $ `Handlebar Tape 1`          <chr> \"Canyon Ergospeed Gel\", \"Canyon Ergospeed …\n#> $ `Handlebar Tape 2`          <chr> \"Canyon bar-end plug\", \"Canyon bar-end plu…\n#> $ `Manuals and Accessories 1` <chr> \"Canyon tool case\", \"Canyon tool case\", \"C…\n#> $ `Manuals and Accessories 2` <chr> \"DT Swiss warranty & intended use manual\",…\n#> $ `Manuals and Accessories 3` <chr> \"Canyon starter box\", \"Canyon starter box\"…\n#> $ `Manuals and Accessories 4` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"BAG R…\n#> $ `Manuals and Accessories 5` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 6` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 7` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 8` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake Rotor`               <list> \"Shimano RT800\", \"SRAM Centerline X\", \"Sh…\n\nbike_features_tbl <- bike_features_tbl %>% \n  # locl some variables out\n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %>% \n  # get rid of NAs\n  mutate_if(is.numeric, ~replace(., is.na(.), 0))\n\n\nbike_features_tbl <- bike_features_tbl %>% \n  # add an ID\n  mutate(id = row_number())\n\n# run both following commands at the same time\nset.seed(seed = 123)\nsplit_obj <- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\n\n# Check if testing contains all category_2 values\nsplit_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\n# Assign training and test data\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\ntrain_tbl <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\nWe create a feature recipe and define our model\n\nbike_recipe_obj <- \n  recipe(price ~ ., data = train_tbl) %>% \n  step_rm(id, weight, category_1, category_3, gender) %>%\n  step_dummy(all_nominal(), -all_outcomes()) %>%\n  prep()\n\ntrain_transformed_tbl <- bake(bike_recipe_obj, new_data = train_tbl)\ntest_transformed_tbl <- bake(bike_recipe_obj, new_data = test_tbl)\n\nmymodel <- \n  decision_tree(mode= \"regression\",\n                cost_complexity = 0.001,\n                tree_depth      = 5,\n                min_n           = 7) %>% \n  set_engine(\"rpart\")\n\nNow, we can create a workflow for the features and model\n\nbike_wf <- \n  workflow() %>% \n  add_model(mymodel) %>% \n  add_recipe(bike_recipe_obj)\n\nLastly, we can fit the model and look at the results\n\nbike_ft <- bike_wf %>%\n  fit(data=train_tbl)\n\nbf_pred <- \n  predict(bike_ft, test_tbl) %>% \n  bind_cols(test_tbl %>% select(price)) \n\nbf_pred\n\n\n\n  \n\n\nbf_pred %>% yardstick::metrics(truth = price, estimate = .pred)"
  },
  {
    "objectID": "content/01_journal/auto_ml_perf.html",
    "href": "content/01_journal/auto_ml_perf.html",
    "title": "Automated Machine Learning (II) and Performance measures",
    "section": "",
    "text": "In this section, we tackle the Challengea for Automated Machine Learning (II) and Performance Measures. ### Automated Machine Learning (II) First, we load some libraries and initialize h2o\n\nlibrary(readr)\nlibrary(readxl)\nlibrary(rsample)\nlibrary(dplyr)\nlibrary(recipes)\nlibrary(h2o)\nlibrary(tidyverse)\n\nh2o.init()  # init h2o\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 hours 43 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 12 days \n#>     H2O cluster name:           H2O_started_from_R_finn_ptk775 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   2.60 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21)\n\n\nWe load the data\n\n## load the datasets\nproduct_backorders_tbl <- read_csv(\"../../product_backorders.csv\")\n# we need a split object, choose 85% training data\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.85)\n# do the actual split\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl <- testing(split_obj)  # tbls looking tidy, assume no fruther preproc. is needed\n\nWe create a recipe and specify the response and predictor variables\n\nrecipe_obj <- recipe(went_on_backorder ~ ., data = train_readable_tbl) %>%\n  step_zv(all_predictors()) %>%  # remove columns with only one value\n  # all data is numeric/factors, nothing left to do\n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# h2o prep, specify predictor and target vars\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\nWe now run autoML specifying the stopping criterion\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 200,  # higher runtime was needed, autoML complained about not finding any model.\n  nfolds            = 5 \n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |                                                                      |   1%\n#> 16:36:41.102: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |==============                                                        |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |=================================================                     |  69%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |======================================================                |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |========================================================              |  81%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |===============================================================       |  91%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |====================================================================  |  98%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\n\nWe can view the leaderboard to find the best models\n\nslotNames(automl_models_h2o)\n\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n\nautoml_models_h2o@leaderboard\n\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_3_AutoML_8_20230521_163641 0.9568716 0.1612110\n#> 2         XGBoost_grid_1_AutoML_8_20230521_163641_model_2 0.9560468 0.1632957\n#> 3 StackedEnsemble_BestOfFamily_4_AutoML_8_20230521_163641 0.9559865 0.1621414\n#> 4 StackedEnsemble_BestOfFamily_3_AutoML_8_20230521_163641 0.9544824 0.1646198\n#> 5    StackedEnsemble_AllModels_2_AutoML_8_20230521_163641 0.9543769 0.1654146\n#> 6         XGBoost_grid_1_AutoML_8_20230521_163641_model_4 0.9535603 0.1711374\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7646367            0.1308673 0.2172241 0.04718629\n#> 2 0.7602376            0.1366315 0.2190505 0.04798313\n#> 3 0.7632521            0.1300060 0.2182045 0.04761322\n#> 4 0.7585241            0.1452451 0.2188525 0.04789643\n#> 5 0.7534129            0.1302048 0.2200947 0.04844166\n#> 6 0.7604963            0.1366321 0.2228150 0.04964651\n#> \n#> [64 rows x 7 columns]\n\nautoml_models_h2o@leader\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_8_20230521_163641 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            19/56\n#> 3           # GBM base models (used / total)             4/24\n#> 4       # XGBoost base models (used / total)            12/23\n#> 5           # DRF base models (used / total)              2/2\n#> 6  # DeepLearning base models (used / total)              0/6\n#> 7           # GLM base models (used / total)              1/1\n#> 8                      Metalearner algorithm              GLM\n#> 9         Metalearner fold assignment scheme           Random\n#> 10                        Metalearner nfolds                5\n#> 11                   Metalearner fold_column               NA\n#> 12        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02057401\n#> RMSE:  0.1434364\n#> LogLoss:  0.08208601\n#> Mean Per-Class Error:  0.0497189\n#> AUC:  0.9941161\n#> AUCPR:  0.9671187\n#> Gini:  0.9882322\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8697  123 0.013946  =123/8820\n#> Yes      99 1059 0.085492   =99/1158\n#> Totals 8796 1182 0.022249  =222/9978\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.406675    0.905128 183\n#> 2                       max f2  0.350978    0.913486 198\n#> 3                 max f0point5  0.594378    0.932273 135\n#> 4                 max accuracy  0.450843    0.978252 173\n#> 5                max precision  0.991528    1.000000   0\n#> 6                   max recall  0.019785    1.000000 354\n#> 7              max specificity  0.991528    1.000000   0\n#> 8             max absolute_mcc  0.450843    0.892793 173\n#> 9   max min_per_class_accuracy  0.249626    0.959184 230\n#> 10 max mean_per_class_accuracy  0.249626    0.959298 230\n#> 11                     max tns  0.991528 8820.000000   0\n#> 12                     max fns  0.991528 1156.000000   0\n#> 13                     max fps  0.000538 8820.000000 399\n#> 14                     max tps  0.019785 1158.000000 354\n#> 15                     max tnr  0.991528    1.000000   0\n#> 16                     max fnr  0.991528    0.998273   0\n#> 17                     max fpr  0.000538    1.000000 399\n#> 18                     max tpr  0.019785    1.000000 354\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04754009\n#> RMSE:  0.2180369\n#> LogLoss:  0.1567978\n#> Mean Per-Class Error:  0.1314887\n#> AUC:  0.9630208\n#> AUCPR:  0.7754713\n#> Gini:  0.9260415\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2017  84 0.039981   =84/2101\n#> Yes      64 223 0.222997    =64/287\n#> Totals 2081 307 0.061977  =148/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.348138    0.750842 187\n#> 2                       max f2  0.207765    0.806870 227\n#> 3                 max f0point5  0.701665    0.743455  95\n#> 4                 max accuracy  0.348138    0.938023 187\n#> 5                max precision  0.935452    0.961538  16\n#> 6                   max recall  0.015971    1.000000 355\n#> 7              max specificity  0.981947    0.999524   0\n#> 8             max absolute_mcc  0.348138    0.716027 187\n#> 9   max min_per_class_accuracy  0.141145    0.895470 261\n#> 10 max mean_per_class_accuracy  0.111502    0.900435 275\n#> 11                     max tns  0.981947 2100.000000   0\n#> 12                     max fns  0.981947  287.000000   0\n#> 13                     max fps  0.000628 2101.000000 399\n#> 14                     max tps  0.015971  287.000000 355\n#> 15                     max tnr  0.981947    0.999524   0\n#> 16                     max fnr  0.981947    1.000000   0\n#> 17                     max fpr  0.000628    1.000000 399\n#> 18                     max tpr  0.015971    1.000000 355\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04925558\n#> RMSE:  0.221936\n#> LogLoss:  0.1644987\n#> Mean Per-Class Error:  0.157046\n#> AUC:  0.9551036\n#> AUCPR:  0.7637539\n#> Gini:  0.9102073\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error        Rate\n#> No     11629  542 0.044532  =542/12171\n#> Yes      441 1195 0.269560   =441/1636\n#> Totals 12070 1737 0.071196  =983/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.360175     0.708568 203\n#> 2                       max f2  0.130029     0.787346 289\n#> 3                 max f0point5  0.606611     0.739550 128\n#> 4                 max accuracy  0.568958     0.932570 139\n#> 5                max precision  0.991347     1.000000   0\n#> 6                   max recall  0.002831     1.000000 393\n#> 7              max specificity  0.991347     1.000000   0\n#> 8             max absolute_mcc  0.360175     0.668447 203\n#> 9   max min_per_class_accuracy  0.127434     0.893846 290\n#> 10 max mean_per_class_accuracy  0.117550     0.895407 295\n#> 11                     max tns  0.991347 12171.000000   0\n#> 12                     max fns  0.991347  1633.000000   0\n#> 13                     max fps  0.000607 12171.000000 399\n#> 14                     max tps  0.002831  1636.000000 393\n#> 15                     max tnr  0.991347     1.000000   0\n#> 16                     max fnr  0.991347     0.998166   0\n#> 17                     max fpr  0.000607     1.000000 399\n#> 18                     max tpr  0.002831     1.000000 393\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.928466  0.005435   0.936537   0.926902   0.930855   0.922390\n#> auc         0.955626  0.006403   0.960230   0.954218   0.952812   0.947285\n#> err         0.071534  0.005435   0.063463   0.073098   0.069145   0.077610\n#> err_count 197.800000 20.216330 173.000000 197.000000 186.000000 226.000000\n#> f0point5    0.692233  0.032865   0.750151   0.674495   0.682095   0.684184\n#>           cv_5_valid\n#> accuracy    0.925647\n#> auc         0.963584\n#> err         0.074353\n#> err_count 207.000000\n#> f0point5    0.670241\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.677743  0.044793   0.756098   0.650000   0.666667\n#> r2                  0.528928  0.019686   0.555933   0.524767   0.519346\n#> recall              0.761629  0.025818   0.727273   0.794212   0.751678\n#> residual_deviance 907.867900 85.196600 880.987240 874.298400 868.992250\n#> rmse                0.221595  0.006610   0.220455   0.220256   0.217597\n#> specificity         0.950968  0.009372   0.966457   0.944211   0.953177\n#>                    cv_4_valid cv_5_valid\n#> precision            0.668281   0.647668\n#> r2                   0.504636   0.539956\n#> recall               0.756164   0.778816\n#> residual_deviance 1059.364600 855.697000\n#> rmse                 0.233041   0.216628\n#> specificity          0.946211   0.944783\n\n\nWe build a helper function to extract an h2o model by position\n\nextract_h2o_model_name_by_position <- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name <- h2o_leaderboard %>%\n    as.tibble() %>%\n    slice(n) %>%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\nand use it to save the best model we got\n\n# save leader model\nautoml_models_h2o@leaderboard %>% extract_h2o_model_name_by_position(1) %>%\n  h2o.getModel() %>%\n  h2o.saveModel(path = \"automl_models/\")\n\n#> [1] \"/home/finn/ss23-bdml-finnBsch/automl_models/StackedEnsemble_AllModels_3_AutoML_8_20230521_163641\"\n\n\nFor future use, we also save a couple other models\n\n# we also save the top 3\nfor (i in 2:3) {\n  automl_models_h2o@leaderboard %>% \n    extract_h2o_model_name_by_position(i) %>% #set n=i\n    h2o.getModel() %>%\n    h2o.saveModel(path = \"automl_models/\")\n}\n\nUsing the leader model, we can also make predictions\n\nbest_model = h2o.loadModel(paste(\"automl_models/\", toString(extract_h2o_model_name_by_position(automl_models_h2o@leaderboard, 1)), sep=\"\"))\n\n#> StackedEnsemble_AllModels_3_AutoML_8_20230521_163641\n\npredictions <- h2o.predict(best_model, newdata = as.h2o(test_h2o))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl <- predictions %>% as_tibble()\npredictions_tbl\n\n\n\n  \n\n\n\n\nPerformance Measures\nTo get a better overview of our models, we can visualize the leader board\n\ndata_transformed_tbl <- automl_models_h2o@leaderboard %>%\n  as_tibble() %>%\n  select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n  mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n  slice(1:15) %>% \n  rownames_to_column(var = \"rowname\") %>%\n  # Visually this step will not change anything\n  # It reorders the factors under the hood\n  mutate(\n    model_id   = as_factor(model_id) %>% reorder(auc),\n    model_type = as.factor(model_type)\n  ) %>% \n  pivot_longer(cols = -c(model_id, model_type, rowname), \n               names_to = \"key\", \n               values_to = \"value\", \n               names_transform = list(key = forcats::fct_inorder)\n  ) %>% \n  mutate(model_id = paste0(rowname, \". \", model_id) %>% as_factor() %>% fct_rev())\n\ndata_transformed_tbl %>%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n  \n  # Facet to break out logloss and auc\n  facet_wrap(~ key, scales = \"free_x\") +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"auc\"),\n       y = \"Model Postion, Model ID\", x = \"\") + \n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nFurthermore, we can perform gridsearch to tune a trained model\n\ngrid_search_h2o_model = h2o.loadModel(paste(\"automl_models/\", toString(extract_h2o_model_name_by_position(automl_models_h2o@leaderboard, 3)), sep=\"\")) # choose the 5th best\n\n#> StackedEnsemble_BestOfFamily_4_AutoML_8_20230521_163641\n\ngrid_search_h2o_model\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_BestOfFamily_4_AutoML_8_20230521_163641 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)              5/6\n#> 3           # GBM base models (used / total)              1/1\n#> 4       # XGBoost base models (used / total)              1/1\n#> 5           # DRF base models (used / total)              2/2\n#> 6  # DeepLearning base models (used / total)              0/1\n#> 7           # GLM base models (used / total)              1/1\n#> 8                      Metalearner algorithm              GLM\n#> 9         Metalearner fold assignment scheme           Random\n#> 10                        Metalearner nfolds                5\n#> 11                   Metalearner fold_column               NA\n#> 12        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02464596\n#> RMSE:  0.1569903\n#> LogLoss:  0.09268513\n#> Mean Per-Class Error:  0.07641581\n#> AUC:  0.9907549\n#> AUCPR:  0.949466\n#> Gini:  0.9815098\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     8741  105 0.011870   =105/8846\n#> Yes     170 1036 0.140962   =170/1206\n#> Totals 8911 1141 0.027358  =275/10052\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.472061    0.882829 165\n#> 2                       max f2  0.286009    0.895903 216\n#> 3                 max f0point5  0.517969    0.908592 151\n#> 4                 max accuracy  0.483351    0.972841 162\n#> 5                max precision  0.993202    1.000000   0\n#> 6                   max recall  0.030002    1.000000 341\n#> 7              max specificity  0.993202    1.000000   0\n#> 8             max absolute_mcc  0.483351    0.868089 162\n#> 9   max min_per_class_accuracy  0.215819    0.947208 239\n#> 10 max mean_per_class_accuracy  0.188315    0.948918 249\n#> 11                     max tns  0.993202 8846.000000   0\n#> 12                     max fns  0.993202 1204.000000   0\n#> 13                     max fps  0.000359 8846.000000 399\n#> 14                     max tps  0.030002 1206.000000 341\n#> 15                     max tnr  0.993202    1.000000   0\n#> 16                     max fnr  0.993202    0.998342   0\n#> 17                     max fpr  0.000359    1.000000 399\n#> 18                     max tpr  0.030002    1.000000 341\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04874676\n#> RMSE:  0.2207867\n#> LogLoss:  0.1594957\n#> Mean Per-Class Error:  0.1419417\n#> AUC:  0.9613773\n#> AUCPR:  0.7732909\n#> Gini:  0.9227546\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2017  84 0.039981   =84/2101\n#> Yes      70 217 0.243902    =70/287\n#> Totals 2087 301 0.064489  =154/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.365644    0.738095 174\n#> 2                       max f2  0.108343    0.803201 279\n#> 3                 max f0point5  0.722309    0.728100  76\n#> 4                 max accuracy  0.365644    0.935511 174\n#> 5                max precision  0.985910    1.000000   0\n#> 6                   max recall  0.016095    1.000000 359\n#> 7              max specificity  0.985910    1.000000   0\n#> 8             max absolute_mcc  0.365644    0.701606 174\n#> 9   max min_per_class_accuracy  0.139214    0.897192 260\n#> 10 max mean_per_class_accuracy  0.108343    0.908346 279\n#> 11                     max tns  0.985910 2101.000000   0\n#> 12                     max fns  0.985910  286.000000   0\n#> 13                     max fps  0.000483 2101.000000 399\n#> 14                     max tps  0.016095  287.000000 359\n#> 15                     max tnr  0.985910    1.000000   0\n#> 16                     max fnr  0.985910    0.996516   0\n#> 17                     max fpr  0.000483    1.000000 399\n#> 18                     max tpr  0.016095    1.000000 359\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.05007327\n#> RMSE:  0.2237706\n#> LogLoss:  0.1674066\n#> Mean Per-Class Error:  0.1542412\n#> AUC:  0.9532863\n#> AUCPR:  0.7545961\n#> Gini:  0.9065726\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error        Rate\n#> No     11608  563 0.046257  =563/12171\n#> Yes      429 1207 0.262225   =429/1636\n#> Totals 12037 1770 0.071848  =992/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.352509     0.708749 202\n#> 2                       max f2  0.155121     0.776550 273\n#> 3                 max f0point5  0.570819     0.732121 134\n#> 4                 max accuracy  0.502195     0.931846 154\n#> 5                max precision  0.992033     1.000000   0\n#> 6                   max recall  0.001586     1.000000 395\n#> 7              max specificity  0.992033     1.000000   0\n#> 8             max absolute_mcc  0.376475     0.668841 194\n#> 9   max min_per_class_accuracy  0.123244     0.885958 287\n#> 10 max mean_per_class_accuracy  0.096438     0.889608 301\n#> 11                     max tns  0.992033 12171.000000   0\n#> 12                     max fns  0.992033  1634.000000   0\n#> 13                     max fps  0.000209 12171.000000 399\n#> 14                     max tps  0.001586  1636.000000 395\n#> 15                     max tnr  0.992033     1.000000   0\n#> 16                     max fnr  0.992033     0.998778   0\n#> 17                     max fpr  0.000209     1.000000 399\n#> 18                     max tpr  0.001586     1.000000 395\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.930436  0.008292   0.932025   0.933949   0.941091   0.919203\n#> auc         0.953530  0.006659   0.957965   0.958739   0.956141   0.942471\n#> err         0.069564  0.008292   0.067975   0.066051   0.058909   0.080797\n#> err_count 192.000000 22.045408 187.000000 186.000000 163.000000 223.000000\n#> f0point5    0.705354  0.039506   0.687176   0.717178   0.763333   0.656318\n#>           cv_5_valid\n#> accuracy    0.925912\n#> auc         0.952335\n#> err         0.074088\n#> err_count 201.000000\n#> f0point5    0.702765\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.699633  0.053632   0.667598   0.710602   0.781570\n#> r2                  0.520910  0.022882   0.523065   0.528783   0.548120\n#> recall              0.734764  0.030185   0.778502   0.744745   0.698171\n#> residual_deviance 924.186340 55.482906 865.508360 907.010900 893.132500\n#> rmse                0.223623  0.006898   0.217450   0.221660   0.217293\n#> specificity         0.956845  0.011035   0.951309   0.959323   0.973760\n#>                    cv_4_valid cv_5_valid\n#> precision            0.639257   0.699140\n#> r2                   0.485057   0.519522\n#> recall               0.734756   0.717647\n#> residual_deviance 1008.432800 946.847100\n#> rmse                 0.232214   0.229496\n#> specificity          0.944079   0.955752\n\nh2o.performance(grid_search_h2o_model, newdata = test_h2o)\n\n#> H2OBinomialMetrics: stackedensemble\n#> \n#> MSE:  0.04761322\n#> RMSE:  0.2182045\n#> LogLoss:  0.1621414\n#> Mean Per-Class Error:  0.130006\n#> AUC:  0.9559865\n#> AUCPR:  0.7632521\n#> Gini:  0.9119731\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2389 126 0.050099  =126/2515\n#> Yes      72 271 0.209913    =72/343\n#> Totals 2461 397 0.069279  =198/2858\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.316884    0.732432 203\n#> 2                       max f2  0.169207    0.794615 252\n#> 3                 max f0point5  0.552780    0.757470 135\n#> 4                 max accuracy  0.472332    0.938768 155\n#> 5                max precision  0.922500    0.926829  19\n#> 6                   max recall  0.005692    1.000000 379\n#> 7              max specificity  0.976248    0.999602   0\n#> 8             max absolute_mcc  0.472332    0.696749 155\n#> 9   max min_per_class_accuracy  0.131363    0.891451 270\n#> 10 max mean_per_class_accuracy  0.120648    0.895831 274\n#> 11                     max tns  0.976248 2514.000000   0\n#> 12                     max fns  0.976248  343.000000   0\n#> 13                     max fps  0.000456 2515.000000 399\n#> 14                     max tps  0.005692  343.000000 379\n#> 15                     max tnr  0.976248    0.999602   0\n#> 16                     max fnr  0.976248    1.000000   0\n#> 17                     max fpr  0.000456    1.000000 399\n#> 18                     max tpr  0.005692    1.000000 379\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n\ndeeplearning_grid_01 <- h2o.grid(\n  \n  # See help page for available algos\n  algorithm = \"deeplearning\",\n  \n  # I just use the same as the object\n  grid_id = \"deeplearning_grid_01\",\n  \n  # The following is for ?h2o.deeplearning()\n  # predictor and response variables\n  x = x,\n  y = y,\n  \n  # training and validation frame and crossfold validation\n  training_frame   = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  \n  # Hyperparamters: Use @allparameters to see all\n  hyper_params = list(\n    # Use some combinations (the first one was the original)\n    hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n    epochs = c(10, 50, 100)\n  )\n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ndeeplearning_grid_01\n\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: deeplearning_grid_01 \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 54 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by increasing logloss\n#>      epochs       hidden                     model_ids logloss\n#> 1 101.39852 [10, 10, 10] deeplearning_grid_01_model_21 0.25578\n#> 2  51.99322 [50, 20, 10] deeplearning_grid_01_model_41 0.26277\n#> 3 101.38571 [50, 20, 10]  deeplearning_grid_01_model_6 0.26352\n#> 4 101.39197 [20, 20, 20] deeplearning_grid_01_model_36 0.26532\n#> 5 101.36387 [10, 10, 10] deeplearning_grid_01_model_39 0.26848\n#> \n#> ---\n#>      epochs       hidden                     model_ids logloss\n#> 49 10.39483 [10, 10, 10] deeplearning_grid_01_model_10 0.31850\n#> 50 10.40301 [10, 10, 10] deeplearning_grid_01_model_46 0.31872\n#> 51 10.41130 [20, 20, 20] deeplearning_grid_01_model_52 0.31952\n#> 52 10.40134 [10, 10, 10] deeplearning_grid_01_model_19 0.32172\n#> 53 10.40297 [50, 20, 10] deeplearning_grid_01_model_40 0.32391\n#> 54 10.40268 [10, 10, 10] deeplearning_grid_01_model_28 0.32617\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: deeplearning_grid_01 \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 54 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>      epochs       hidden                     model_ids     auc\n#> 1 101.39852 [10, 10, 10] deeplearning_grid_01_model_21 0.88812\n#> 2 101.36387 [10, 10, 10] deeplearning_grid_01_model_39 0.87741\n#> 3 101.38571 [50, 20, 10]  deeplearning_grid_01_model_6 0.87660\n#> 4  51.99322 [50, 20, 10] deeplearning_grid_01_model_41 0.87273\n#> 5 101.39197 [20, 20, 20] deeplearning_grid_01_model_36 0.86921\n#> \n#> ---\n#>      epochs       hidden                     model_ids     auc\n#> 49 10.39483 [10, 10, 10] deeplearning_grid_01_model_10 0.75967\n#> 50 10.39370 [50, 20, 10] deeplearning_grid_01_model_49 0.75931\n#> 51 10.40297 [50, 20, 10] deeplearning_grid_01_model_40 0.75795\n#> 52 10.40268 [10, 10, 10] deeplearning_grid_01_model_28 0.75649\n#> 53 10.41130 [20, 20, 20] deeplearning_grid_01_model_52 0.75567\n#> 54 10.40301 [10, 10, 10] deeplearning_grid_01_model_46 0.75528\n\ndeeplearning_grid_01_model_1 <- h2o.getModel(\"deeplearning_grid_01_model_6\")\ndeeplearning_grid_01_model_1 %>% h2o.auc(train = T, valid = T, xval = T)\n\n#>     train     valid      xval \n#> 0.9193910 0.9016496 0.8766034\n\ndeeplearning_grid_01_model_1 %>%\n  h2o.performance(newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#> H2OBinomialMetrics: deeplearning\n#> \n#> MSE:  0.07086486\n#> RMSE:  0.2662045\n#> LogLoss:  0.243012\n#> Mean Per-Class Error:  0.2045488\n#> AUC:  0.9174898\n#> AUCPR:  0.615615\n#> Gini:  0.8349796\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2388 127 0.050497  =127/2515\n#> Yes     123 220 0.358601   =123/343\n#> Totals 2511 347 0.087474  =250/2858\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.255789    0.637681 178\n#> 2                       max f2  0.103190    0.723009 273\n#> 3                 max f0point5  0.292579    0.656531 156\n#> 4                 max accuracy  0.292579    0.916375 156\n#> 5                max precision  0.999942    1.000000   0\n#> 6                   max recall  0.000024    1.000000 399\n#> 7              max specificity  0.999942    1.000000   0\n#> 8             max absolute_mcc  0.255789    0.587954 178\n#> 9   max min_per_class_accuracy  0.107007    0.853280 270\n#> 10 max mean_per_class_accuracy  0.103190    0.856139 273\n#> 11                     max tns  0.999942 2515.000000   0\n#> 12                     max fns  0.999942  342.000000   0\n#> 13                     max fps  0.000024 2515.000000 399\n#> 14                     max tps  0.000024  343.000000 399\n#> 15                     max tnr  0.999942    1.000000   0\n#> 16                     max fnr  0.999942    0.997085   0\n#> 17                     max fpr  0.000024    1.000000 399\n#> 18                     max tpr  0.000024    1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n\n\nWe can dive deeper into investigating performance by visualizing the trade off between precision and recall as well as the optimal threshold\n\ntheme_new <- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),,\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n) \n# Metrics loader\nload_model_performance_metrics <- function(path, test_tbl) {\n  model_h2o <- h2o.loadModel(path)\n  perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n  \n  perf_h2o %>%\n    h2o.metric() %>%\n    as_tibble() %>%\n    mutate(auc = h2o.auc(perf_h2o)) %>%\n    select(f1, tpr, fpr, auc, precision, recall)\n  \n}\nperformance_h2o <- h2o.performance( h2o.loadModel(paste(\"automl_models/\", toString(extract_h2o_model_name_by_position(automl_models_h2o@leaderboard, 3)), sep=\"\")), newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nperformance_tbl <- performance_h2o %>%\n  h2o.metric() %>%\n  as.tibble() \nperformance_tbl %>%\n  filter(f1 == max(f1))\n\n\n\n  \n\n\nperformance_tbl %>%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\n\n\n\n\n\n\n\n\nCreate the ROC Plot\n\nsetwd(\"../../\")\nmodel_metrics_tbl <- fs::dir_info(path = \"automl_models/\") %>%\n  select(path) %>%\n  mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n  unnest(cols = metrics)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %>%\n  mutate(\n    # Extract the model names\n    path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n    auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n  ) %>%\n  ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  \n  # just for demonstration purposes\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  \n  theme_new +\n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\n\n\n\n\n\n\n\nAnd the precision vs recall plot\n\nmodel_metrics_tbl %>%\n  mutate(\n    path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n    auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n  ) %>%\n  ggplot(aes(recall, precision, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  theme_new + \n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\n\n\n\n\n\n\n\nWe create the gain plot\n\nranked_predictions_tbl <- predictions_tbl %>%\n  bind_cols(test_tbl) %>%\n  select(predict:Yes, went_on_backorder) %>%\n  arrange(desc(Yes))\n\ncalculated_gain_lift_tbl <- ranked_predictions_tbl %>%\n  mutate(ntile = ntile(Yes, n = 10)) %>%\n  group_by(ntile) %>%\n  summarise(\n    cases = n(),\n    responses = sum(went_on_backorder == \"Yes\")\n  ) %>%\n  arrange(desc(ntile)) %>%\n  mutate(group = row_number()) %>%\n  select(group, cases, responses) %>%\n  mutate(\n    cumulative_responses = cumsum(responses),\n    pct_responses        = responses / sum(responses),\n    gain                 = cumsum(pct_responses),\n    cumulative_pct_cases = cumsum(cases) / sum(cases),\n    lift                 = gain / cumulative_pct_cases,\n    gain_baseline        = cumulative_pct_cases,\n    lift_baseline        = gain_baseline / cumulative_pct_cases\n  )\n\ngain_lift_tbl <- performance_h2o %>%\n  h2o.gainsLift() %>%\n  as.tibble()\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"lift\")) %>%\n  mutate(baseline = cumulative_data_fraction) %>%\n  rename(gain     = cumulative_capture_rate) %>%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  ) +\n  theme_new\n\n\n\n\n\n\n\n\nAnd lift plot\n\nlift_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"capture\")) %>%\n  mutate(baseline = 1) %>%\n  rename(lift = cumulative_lift) %>%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  ) +\n  theme_new\n\n\n\n\n\n\n\n\nLastly, we can combine our plots in one dashboard using cowplot\n\nlibrary(cowplot)\nlibrary(glue)\nh2o_leaderboard <- automl_models_h2o@leaderboard\nnewdata <- test_tbl\norder_by <- \"auc\"\nmax_models <- 4\nsize <- 1\n\nplot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n  \n  # Inputs\n  \n  leaderboard_tbl <- h2o_leaderboard %>%\n    as_tibble() %>%\n    slice(1:max_models)\n  \n  newdata_tbl <- newdata %>%\n    as_tibble()\n  \n  # Selecting the first, if nothing is provided\n  order_by      <- tolower(order_by[[1]]) \n  \n  # Convert string stored in a variable to column name (symbol)\n  order_by_expr <- rlang::sym(order_by)\n  \n  # Turn of the progress bars ( opposite h2o.show_progress())\n  h2o.no_progress()\n  \n  # 1. Model metrics\n  \n  get_model_performance_metrics <- function(model_id, test_tbl) {\n    \n    model_h2o <- h2o.getModel(model_id)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n    \n    perf_h2o %>%\n      h2o.metric() %>%\n      as.tibble() %>%\n      select(threshold, tpr, fpr, precision, recall)\n    \n  }\n  \n  model_metrics_tbl <- leaderboard_tbl %>%\n    mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n    unnest(cols = metrics) %>%\n    mutate(\n      model_id = as_factor(model_id) %>% \n        # programmatically reorder factors depending on order_by\n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc      = auc %>% \n        round(3) %>% \n        as.character() %>% \n        as_factor() %>% \n        fct_reorder(as.numeric(model_id)),\n      logloss  = logloss %>% \n        round(4) %>% \n        as.character() %>% \n        as_factor() %>% \n        fct_reorder(as.numeric(model_id))\n    )\n  \n  \n  # 1A. ROC Plot\n  \n  p1 <- model_metrics_tbl %>%\n    ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n    theme(legend.direction = \"vertical\") \n  \n  \n  # 1B. Precision vs Recall\n  \n  p2 <- model_metrics_tbl %>%\n    ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n    theme(legend.position = \"none\") \n  \n  \n  # 2. Gain / Lift\n  \n  get_gain_lift <- function(model_id, test_tbl) {\n    \n    model_h2o <- h2o.getModel(model_id)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n      h2o.gainsLift() %>%\n      as.tibble() %>%\n      select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n    \n  }\n  \n  gain_lift_tbl <- leaderboard_tbl %>%\n    mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n    unnest(cols = metrics) %>%\n    mutate(\n      model_id = as_factor(model_id) %>% \n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc  = auc %>% \n        round(3) %>% \n        as.character() %>% \n        as_factor() %>% \n        fct_reorder(as.numeric(model_id)),\n      logloss = logloss %>% \n        round(4) %>% \n        as.character() %>% \n        as_factor() %>% \n        fct_reorder(as.numeric(model_id))\n    ) %>%\n    rename(\n      gain = cumulative_capture_rate,\n      lift = cumulative_lift\n    ) \n  \n  # 2A. Gain Plot\n  \n  p3 <- gain_lift_tbl %>%\n    ggplot(aes(cumulative_data_fraction, gain, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size,) +\n    geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Gain\",\n         x = \"Cumulative Data Fraction\", y = \"Gain\") +\n    theme(legend.position = \"none\")\n  \n  # 2B. Lift Plot\n  \n  p4 <- gain_lift_tbl %>%\n    ggplot(aes(cumulative_data_fraction, lift, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Lift\",\n         x = \"Cumulative Data Fraction\", y = \"Lift\") +\n    theme(legend.position = \"none\") \n  \n  \n  # Combine using cowplot\n  \n  # cowplot::get_legend extracts a legend from a ggplot object\n  p_legend <- get_legend(p1)\n  # Remove legend from p1\n  p1 <- p1 + theme(legend.position = \"none\")\n  \n  # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n  p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n  \n  # cowplot::ggdraw() sets up a drawing layer\n  p_title <- ggdraw() + \n    \n    # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n    draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n               color = \"#2C3E50\")\n  \n  p_subtitle <- ggdraw() + \n    draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n               color = \"#2C3E50\")\n  \n  # Combine everything\n  ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n                   \n                   # Adjust the relative spacing, so that the legends always fits\n                   ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n  \n  h2o.show_progress()\n  \n  return(ret)\n  \n}\n\nautoml_models_h2o@leaderboard %>%\n  plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                       size = 0.5, max_models = 4)"
  },
  {
    "objectID": "content/01_journal/lime.html",
    "href": "content/01_journal/lime.html",
    "title": "Explaining Models with LIME",
    "section": "",
    "text": "First, we load some libraries\n\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\nlibrary(rsample)\n\nWe load the data and the trained model\n\nproduct_data <- read_csv(\"../../product_backorders.csv\")\n\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsplit_obj<- initial_split(product_data, prop = 0.85)\ntrain_readable_tbl<- training(split_obj)\ntest_readable_tbl<- testing(split_obj)\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_readable_tbl) %>% \n  step_zv(all_predictors()) %>%\n  prep()\ntrain_tbl<- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl<- bake(recipe_obj, new_data = test_readable_tbl)\nautoml_leader <- h2o.loadModel(paste(\"automl_models/\", \"StackedEnsemble_AllModels_3_AutoML_8_20230521_163641\", sep=\"\"))\n\nWe create the explainer object\n\npredictions_tbl <- automl_leader %>% \n  h2o.predict(newdata = as.h2o(test_tbl)) %>%\n  as.tibble() %>%\n  bind_cols(\n    test_tbl %>%\n      select(everything())\n  )\n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nsummary(train_tbl)\n\n#>       sku           national_inv        lead_time      in_transit_qty    \n#>  Min.   :1112168   Min.   : -1440.0   Min.   : 0.000   Min.   :     0.0  \n#>  1st Qu.:1512764   1st Qu.:     3.0   1st Qu.: 4.000   1st Qu.:     0.0  \n#>  Median :1924199   Median :    11.0   Median : 8.000   Median :     0.0  \n#>  Mean   :2060809   Mean   :   399.1   Mean   : 7.711   Mean   :    51.7  \n#>  3rd Qu.:2828770   3rd Qu.:    63.0   3rd Qu.: 8.000   3rd Qu.:     0.0  \n#>  Max.   :3284775   Max.   :730722.0   Max.   :52.000   Max.   :170920.0  \n#>                                       NA's   :894                        \n#>  forecast_3_month   forecast_6_month   forecast_9_month    sales_1_month     \n#>  Min.   :     0.0   Min.   :     0.0   Min.   :      0.0   Min.   :     0.0  \n#>  1st Qu.:     0.0   1st Qu.:     0.0   1st Qu.:      0.0   1st Qu.:     0.0  \n#>  Median :     0.0   Median :     0.0   Median :      0.0   Median :     0.0  \n#>  Mean   :   191.8   Mean   :   361.3   Mean   :    523.6   Mean   :    61.1  \n#>  3rd Qu.:     9.0   3rd Qu.:    20.0   3rd Qu.:     30.0   3rd Qu.:     5.0  \n#>  Max.   :479808.0   Max.   :967776.0   Max.   :1418208.0   Max.   :186451.0  \n#>                                                                              \n#>  sales_3_month      sales_6_month       sales_9_month          min_bank       \n#>  Min.   :     0.0   Min.   :      0.0   Min.   :      0.0   Min.   :    0.00  \n#>  1st Qu.:     0.0   1st Qu.:      0.0   1st Qu.:      0.0   1st Qu.:    0.00  \n#>  Median :     1.0   Median :      3.0   Median :      5.0   Median :    0.00  \n#>  Mean   :   181.9   Mean   :    359.2   Mean   :    542.9   Mean   :   52.33  \n#>  3rd Qu.:    16.0   3rd Qu.:     32.0   3rd Qu.:     47.0   3rd Qu.:    3.00  \n#>  Max.   :550609.0   Max.   :1136154.0   Max.   :1759152.0   Max.   :85584.00  \n#>                                                                               \n#>  potential_issue pieces_past_due     perf_6_month_avg  perf_12_month_avg\n#>  No :16176       Min.   :    0.000   Min.   :-99.000   Min.   :-99.000  \n#>  Yes:   19       1st Qu.:    0.000   1st Qu.:  0.630   1st Qu.:  0.660  \n#>                  Median :    0.000   Median :  0.820   Median :  0.800  \n#>                  Mean   :    2.426   Mean   : -6.426   Mean   : -5.903  \n#>                  3rd Qu.:    0.000   3rd Qu.:  0.960   3rd Qu.:  0.950  \n#>                  Max.   :13824.000   Max.   :  1.000   Max.   :  1.000  \n#>                                                                         \n#>   local_bo_qty      deck_risk   oe_constraint ppap_risk   stop_auto_buy\n#>  Min.   :   0.000   No :12629   No :16190     No :14230   No :  555    \n#>  1st Qu.:   0.000   Yes: 3566   Yes:    5     Yes: 1965   Yes:15640    \n#>  Median :   0.000                                                      \n#>  Mean   :   0.967                                                      \n#>  3rd Qu.:   0.000                                                      \n#>  Max.   :1440.000                                                      \n#>                                                                        \n#>  rev_stop    went_on_backorder\n#>  No :16186   No :14291        \n#>  Yes:    9   Yes: 1904        \n#>                               \n#>                               \n#>                               \n#>                               \n#> \n\nexplainer <- train_tbl %>%\n  select(-went_on_backorder) %>%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\n#> Warning: in_transit_qty does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: pieces_past_due does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: local_bo_qty does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\nexplainer\n\n#> $model\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_8_20230521_163641 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            19/56\n#> 3           # GBM base models (used / total)             4/24\n#> 4       # XGBoost base models (used / total)            12/23\n#> 5           # DRF base models (used / total)              2/2\n#> 6  # DeepLearning base models (used / total)              0/6\n#> 7           # GLM base models (used / total)              1/1\n#> 8                      Metalearner algorithm              GLM\n#> 9         Metalearner fold assignment scheme           Random\n#> 10                        Metalearner nfolds                5\n#> 11                   Metalearner fold_column               NA\n#> 12        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02057401\n#> RMSE:  0.1434364\n#> LogLoss:  0.08208601\n#> Mean Per-Class Error:  0.0497189\n#> AUC:  0.9941161\n#> AUCPR:  0.9671187\n#> Gini:  0.9882322\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8697  123 0.013946  =123/8820\n#> Yes      99 1059 0.085492   =99/1158\n#> Totals 8796 1182 0.022249  =222/9978\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.406675    0.905128 183\n#> 2                       max f2  0.350978    0.913486 198\n#> 3                 max f0point5  0.594378    0.932273 135\n#> 4                 max accuracy  0.450843    0.978252 173\n#> 5                max precision  0.991528    1.000000   0\n#> 6                   max recall  0.019785    1.000000 354\n#> 7              max specificity  0.991528    1.000000   0\n#> 8             max absolute_mcc  0.450843    0.892793 173\n#> 9   max min_per_class_accuracy  0.249626    0.959184 230\n#> 10 max mean_per_class_accuracy  0.249626    0.959298 230\n#> 11                     max tns  0.991528 8820.000000   0\n#> 12                     max fns  0.991528 1156.000000   0\n#> 13                     max fps  0.000538 8820.000000 399\n#> 14                     max tps  0.019785 1158.000000 354\n#> 15                     max tnr  0.991528    1.000000   0\n#> 16                     max fnr  0.991528    0.998273   0\n#> 17                     max fpr  0.000538    1.000000 399\n#> 18                     max tpr  0.019785    1.000000 354\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04754009\n#> RMSE:  0.2180369\n#> LogLoss:  0.1567978\n#> Mean Per-Class Error:  0.1314887\n#> AUC:  0.9630208\n#> AUCPR:  0.7754713\n#> Gini:  0.9260415\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2017  84 0.039981   =84/2101\n#> Yes      64 223 0.222997    =64/287\n#> Totals 2081 307 0.061977  =148/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.348138    0.750842 187\n#> 2                       max f2  0.207765    0.806870 227\n#> 3                 max f0point5  0.701665    0.743455  95\n#> 4                 max accuracy  0.348138    0.938023 187\n#> 5                max precision  0.935452    0.961538  16\n#> 6                   max recall  0.015971    1.000000 355\n#> 7              max specificity  0.981947    0.999524   0\n#> 8             max absolute_mcc  0.348138    0.716027 187\n#> 9   max min_per_class_accuracy  0.141145    0.895470 261\n#> 10 max mean_per_class_accuracy  0.111502    0.900435 275\n#> 11                     max tns  0.981947 2100.000000   0\n#> 12                     max fns  0.981947  287.000000   0\n#> 13                     max fps  0.000628 2101.000000 399\n#> 14                     max tps  0.015971  287.000000 355\n#> 15                     max tnr  0.981947    0.999524   0\n#> 16                     max fnr  0.981947    1.000000   0\n#> 17                     max fpr  0.000628    1.000000 399\n#> 18                     max tpr  0.015971    1.000000 355\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04925558\n#> RMSE:  0.221936\n#> LogLoss:  0.1644987\n#> Mean Per-Class Error:  0.157046\n#> AUC:  0.9551036\n#> AUCPR:  0.7637539\n#> Gini:  0.9102073\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error        Rate\n#> No     11629  542 0.044532  =542/12171\n#> Yes      441 1195 0.269560   =441/1636\n#> Totals 12070 1737 0.071196  =983/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.360175     0.708568 203\n#> 2                       max f2  0.130029     0.787346 289\n#> 3                 max f0point5  0.606611     0.739550 128\n#> 4                 max accuracy  0.568958     0.932570 139\n#> 5                max precision  0.991347     1.000000   0\n#> 6                   max recall  0.002831     1.000000 393\n#> 7              max specificity  0.991347     1.000000   0\n#> 8             max absolute_mcc  0.360175     0.668447 203\n#> 9   max min_per_class_accuracy  0.127434     0.893846 290\n#> 10 max mean_per_class_accuracy  0.117550     0.895407 295\n#> 11                     max tns  0.991347 12171.000000   0\n#> 12                     max fns  0.991347  1633.000000   0\n#> 13                     max fps  0.000607 12171.000000 399\n#> 14                     max tps  0.002831  1636.000000 393\n#> 15                     max tnr  0.991347     1.000000   0\n#> 16                     max fnr  0.991347     0.998166   0\n#> 17                     max fpr  0.000607     1.000000 399\n#> 18                     max tpr  0.002831     1.000000 393\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.928466  0.005435   0.936537   0.926902   0.930855   0.922390\n#> auc         0.955626  0.006403   0.960230   0.954218   0.952812   0.947285\n#> err         0.071534  0.005435   0.063463   0.073098   0.069145   0.077610\n#> err_count 197.800000 20.216330 173.000000 197.000000 186.000000 226.000000\n#> f0point5    0.692233  0.032865   0.750151   0.674495   0.682095   0.684184\n#>           cv_5_valid\n#> accuracy    0.925647\n#> auc         0.963584\n#> err         0.074353\n#> err_count 207.000000\n#> f0point5    0.670241\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.677743  0.044793   0.756098   0.650000   0.666667\n#> r2                  0.528928  0.019686   0.555933   0.524767   0.519346\n#> recall              0.761629  0.025818   0.727273   0.794212   0.751678\n#> residual_deviance 907.867900 85.196600 880.987240 874.298400 868.992250\n#> rmse                0.221595  0.006610   0.220455   0.220256   0.217597\n#> specificity         0.950968  0.009372   0.966457   0.944211   0.953177\n#>                    cv_4_valid cv_5_valid\n#> precision            0.668281   0.647668\n#> r2                   0.504636   0.539956\n#> recall               0.756164   0.778816\n#> residual_deviance 1059.364600 855.697000\n#> rmse                 0.233041   0.216628\n#> specificity          0.946211   0.944783\n#> \n#> $preprocess\n#> function (x) \n#> x\n#> <bytecode: 0x564b563e15d0>\n#> <environment: 0x564b563d5af8>\n#> \n#> $bin_continuous\n#> [1] TRUE\n#> \n#> $n_bins\n#> [1] 4\n#> \n#> $quantile_bins\n#> [1] TRUE\n#> \n#> $use_density\n#> [1] TRUE\n#> \n#> $feature_type\n#>               sku      national_inv         lead_time    in_transit_qty \n#>         \"numeric\"         \"numeric\"         \"numeric\"         \"numeric\" \n#>  forecast_3_month  forecast_6_month  forecast_9_month     sales_1_month \n#>         \"numeric\"         \"numeric\"         \"numeric\"         \"numeric\" \n#>     sales_3_month     sales_6_month     sales_9_month          min_bank \n#>         \"numeric\"         \"numeric\"         \"numeric\"         \"numeric\" \n#>   potential_issue   pieces_past_due  perf_6_month_avg perf_12_month_avg \n#>          \"factor\"         \"numeric\"         \"numeric\"         \"numeric\" \n#>      local_bo_qty         deck_risk     oe_constraint         ppap_risk \n#>         \"numeric\"          \"factor\"          \"factor\"          \"factor\" \n#>     stop_auto_buy          rev_stop \n#>          \"factor\"          \"factor\" \n#> \n#> $bin_cuts\n#> $bin_cuts$sku\n#>      0%     25%     50%     75%    100% \n#> 1112168 1512764 1924199 2828770 3284775 \n#> \n#> $bin_cuts$national_inv\n#>     0%    25%    50%    75%   100% \n#>  -1440      3     11     63 730722 \n#> \n#> $bin_cuts$lead_time\n#>   0%  25%  50% 100% \n#>    0    4    8   52 \n#> \n#> $bin_cuts$in_transit_qty\n#> [1]      0  42730  85460 128190 170920\n#> \n#> $bin_cuts$forecast_3_month\n#>     0%    75%   100% \n#>      0      9 479808 \n#> \n#> $bin_cuts$forecast_6_month\n#>     0%    75%   100% \n#>      0     20 967776 \n#> \n#> $bin_cuts$forecast_9_month\n#>      0%     75%    100% \n#>       0      30 1418208 \n#> \n#> $bin_cuts$sales_1_month\n#>     0%    75%   100% \n#>      0      5 186451 \n#> \n#> $bin_cuts$sales_3_month\n#>     0%    50%    75%   100% \n#>      0      1     16 550609 \n#> \n#> $bin_cuts$sales_6_month\n#>      0%     50%     75%    100% \n#>       0       3      32 1136154 \n#> \n#> $bin_cuts$sales_9_month\n#>      0%     50%     75%    100% \n#>       0       5      47 1759152 \n#> \n#> $bin_cuts$min_bank\n#>    0%   75%  100% \n#>     0     3 85584 \n#> \n#> $bin_cuts$potential_issue\n#> NULL\n#> \n#> $bin_cuts$pieces_past_due\n#> [1]     0  3456  6912 10368 13824\n#> \n#> $bin_cuts$perf_6_month_avg\n#>     0%    25%    50%    75%   100% \n#> -99.00   0.63   0.82   0.96   1.00 \n#> \n#> $bin_cuts$perf_12_month_avg\n#>     0%    25%    50%    75%   100% \n#> -99.00   0.66   0.80   0.95   1.00 \n#> \n#> $bin_cuts$local_bo_qty\n#> [1]    0  360  720 1080 1440\n#> \n#> $bin_cuts$deck_risk\n#> NULL\n#> \n#> $bin_cuts$oe_constraint\n#> NULL\n#> \n#> $bin_cuts$ppap_risk\n#> NULL\n#> \n#> $bin_cuts$stop_auto_buy\n#> NULL\n#> \n#> $bin_cuts$rev_stop\n#> NULL\n#> \n#> \n#> $feature_distribution\n#> $feature_distribution$sku\n#> \n#>         1         2         3         4 \n#> 0.2500154 0.2500154 0.2499537 0.2500154 \n#> \n#> $feature_distribution$national_inv\n#> \n#>         1         2         3         4 \n#> 0.2747144 0.2259957 0.2498919 0.2493980 \n#> \n#> $feature_distribution$lead_time\n#> \n#>         1         2         3 \n#> 0.3005249 0.4119173 0.2323557 \n#> \n#> $feature_distribution$in_transit_qty\n#> \n#>            1            2            4 \n#> 9.998148e-01 1.234949e-04 6.174745e-05 \n#> \n#> $feature_distribution$forecast_3_month\n#> \n#>         1         2 \n#> 0.7517752 0.2482248 \n#> \n#> $feature_distribution$forecast_6_month\n#> \n#>         1         2 \n#> 0.7534424 0.2465576 \n#> \n#> $feature_distribution$forecast_9_month\n#> \n#>         1         2 \n#> 0.7532572 0.2467428 \n#> \n#> $feature_distribution$sales_1_month\n#> \n#>         1         2 \n#> 0.7609756 0.2390244 \n#> \n#> $feature_distribution$sales_3_month\n#> \n#>         1         2         3 \n#> 0.5027478 0.2497684 0.2474838 \n#> \n#> $feature_distribution$sales_6_month\n#> \n#>         1         2         3 \n#> 0.5114542 0.2410003 0.2475455 \n#> \n#> $feature_distribution$sales_9_month\n#> \n#>         1         2         3 \n#> 0.5163939 0.2348873 0.2487187 \n#> \n#> $feature_distribution$min_bank\n#> \n#>         1         2 \n#> 0.7566533 0.2433467 \n#> \n#> $feature_distribution$potential_issue\n#> \n#>          No         Yes \n#> 0.998826798 0.001173202 \n#> \n#> $feature_distribution$pieces_past_due\n#> \n#>            1            2            4 \n#> 9.998765e-01 6.174745e-05 6.174745e-05 \n#> \n#> $feature_distribution$perf_6_month_avg\n#> \n#>         1         2         3         4 \n#> 0.2599568 0.2583513 0.2326644 0.2490275 \n#> \n#> $feature_distribution$perf_12_month_avg\n#> \n#>         1         2         3         4 \n#> 0.2824328 0.2251930 0.2610065 0.2313677 \n#> \n#> $feature_distribution$local_bo_qty\n#> \n#>            1            2            3            4 \n#> 9.994443e-01 2.469898e-04 6.174745e-05 2.469898e-04 \n#> \n#> $feature_distribution$deck_risk\n#> \n#>        No       Yes \n#> 0.7798086 0.2201914 \n#> \n#> $feature_distribution$oe_constraint\n#> \n#>           No          Yes \n#> 0.9996912627 0.0003087373 \n#> \n#> $feature_distribution$ppap_risk\n#> \n#>        No       Yes \n#> 0.8786663 0.1213337 \n#> \n#> $feature_distribution$stop_auto_buy\n#> \n#>         No        Yes \n#> 0.03426984 0.96573016 \n#> \n#> $feature_distribution$rev_stop\n#> \n#>           No          Yes \n#> 0.9994442729 0.0005557271 \n#> \n#> \n#> attr(,\"class\")\n#> [1] \"data_frame_explainer\" \"explainer\"            \"list\"\n\nexplanation <- test_tbl %>%\n  slice(7) %>%\n  select(-went_on_backorder) %>%\n  lime::explain(\n    explainer = explainer,\n    n_labels   = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width   = 1\n  )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %>%\n  as.tibble() %>%\n  select(feature:prediction) \n\n\n\n  \n\n\n\nNow can recreate what “plot_features” achieves\n\nexplanation %>% \n  as.tibble()\n\n\n\n  \n\n\ncase_1 <- explanation %>%\n  filter(case == 1)\n\n\n# recreated plot features\ntheme_lime <- function(...) {\n  theme_minimal() +\n    theme(\n      strip.text = element_text(face = 'bold', size = 9),\n      plot.margin = margin(15, 15, 15, 15),\n      legend.background = element_blank(),\n      legend.key = element_blank(),\n      panel.grid.major.y = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      axis.ticks = element_blank(),\n      legend.position = 'bottom',\n      panel.spacing.y = unit(15, 'pt'),\n      strip.text.x = element_text(margin = margin(t = 2, b = 2), hjust = 0),\n      axis.title.y = element_text(margin = margin(r = 10)),\n      axis.title.x = element_text(margin = margin(t = 10)),\n      ...\n    )\n}\n\ndescription <- \"\"\ndesc_width <- max(nchar(description)) + 1\ndescription <- paste0(format(description, width = desc_width), case_1$feature_desc)\ncase_1$description <- factor(description, levels = description[order(abs(case_1$feature_weight))])\ncase_1$`Explanation fit` <- format(case_1$model_r2, digits = 2)\ncase_1$probability <- format(case_1$label_prob, digits = 2)\nggplot(case_1) + \n  facet_wrap(~ case + label  + probability + `Explanation fit`, labeller = label_both, scales = 'free_y', ncol = 1) +\n  geom_col(aes_(~description, ~feature_weight))+ \n  coord_flip() +\n  theme_lime() \n\n#> Warning: `aes_()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`\n\n\n\n\n\n\n\n\n\nIn a similar fashion, we can recreate the “plot_explanations” function\n\nexplanation <- test_tbl %>%\n  slice(1:20) %>%\n  select(-went_on_backorder) %>%\n  lime::explain(\n    explainer = explainer,\n    n_labels   = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width   = 0.5\n  )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %>%\n  as.tibble()\n\n\n\n  \n\n\nn_cases <- unique(as.numeric(explanation$case))\nexplanation$case <- factor(explanation$case, levels = as.character(sort(n_cases)))\nexplanation$feature_desc <- factor(\n  explanation$feature_desc,\n  levels = rev(unique(explanation$feature_desc[order(explanation$feature, explanation$feature_value)]))\n)\nggplot(explanation, aes_(~case, ~feature_desc)) +\n  geom_tile(aes_(fill = ~feature_weight)) + \n  scale_x_discrete('Case', expand = c(0, 0)) +\n  scale_y_discrete('Feature', expand = c(0, 0)) +\n  scale_fill_gradient2('Feature\\nweight', low = 'firebrick', mid = '#f7f7f7', high = 'steelblue') +\n  theme_lime()+ \n  theme(panel.border = element_rect(fill = NA, colour = 'grey60', size = 1),\n        panel.grid = element_blank(),\n        legend.position = 'right',\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) + \n  facet_wrap(~label)\n\n#> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/auto_ml_1.html",
    "href": "content/01_journal/auto_ml_1.html",
    "title": "Automated Machine Learning Challenge 1",
    "section": "",
    "text": "In this challenge, questions should be answered using the ggpairs plot.\n\nQuestion: What can you deduce about the interaction between Monthly Income and Attrition? Answer: c. Those that are leaving have a lower Monthly Income\nQuestion: What can you deduce about the interaction between Percent Salary Hike and Attrition? Answer: d. It’s difficult to deduce anything based on the visualization\nQuestion: What can you deduce about the interaction between Stock Option Level and Attrition? Answer: b. Those that are staying have a higher stock option level\nQuestion: What can you deduce about the interaction between Environment Satisfaction and Attrition? Answer: a. A higher proportion of those leaving have a low environment satisfaction level\nQuestion: What can you deduce about the interaction between Work Life Balance and Attrition? Answer: b. Those that are staying have a higher density of 2’s and 3’s\nQuestion: What Can you deduce about the interaction between Job Involvement and Attrition? Answer: a. Those that are leaving have a lower density of 3’s and 4’s\nQuestion: What can you deduce about the interaction between Over Time and Attrition? Answer: a. The proportion of those leaving that are working Over Time are high compared to those that are not leaving\nQuestion: What can you deduce about the interaction between Training Times Last Year and Attrition Answer: b. People that leave tend to have less annual trainings\nQuestion: What can you deduce about the interaction between Years At Company and Attrition Answer: b. People that leave tend to have less working years at the company\nQuestion: What can you deduce about the interaction between Years Since Last Promotion and Attrition? Answer: c. It’s difficult to deduce anything based on the visualization\n\n\n1 Question 1: c), lower income\n\n\n2 Question 2: d) difficult\n\n\n3 Question 3: b) ? staying with higher level?\n\n\n4 Question 4: a) higher proportion as low level\n\n\n5 Question 5: b) higher dens of 2 and 3 are staying\n\n\n6 Question 6: a) leaving has nlower 3’s and 4’s\n\n\n7 Question 7: a)\n\n\n8 Question 8: b) less anual training\n\n\n9 Question 9: b) leave with less years\n\n\n10 Question 10: c) difficult"
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html",
    "href": "content/01_journal/01_ml_fund.html",
    "title": "Machine learning Fundamentals",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_ml_fund.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Machine learning Fundamentals",
    "section": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n  select(symbol, date, adjusted) %>% \n  filter(date >= \"2018-01-01\") %>% \n  \n  # Compute lag by symbol\n  group_by(symbol) %>% \n  mutate(lag_adj = lag(adjusted)) %>% \n  \n  # Remove NA values\n  filter(!is.na(lag_adj)) %>% \n  \n  # Compute differences and percentage returns\n  mutate(diff_adj = adjusted - lag_adj,\n         pct_return = diff_adj / lag_adj) %>% \n  \n  # Select desired columns\n  select(symbol, date, pct_return) %>% \n  \n  # Remove grouping\n  ungroup()\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_ml_fund.html#step-2---convert-to-user-item-format",
    "title": "Machine learning Fundamentals",
    "section": "5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n  spread(date, pct_return, fill = 0)\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_ml_fund.html#step-3---perform-k-means-clustering",
    "title": "Machine learning Fundamentals",
    "section": "5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nstock_date_matrix_numeric <- select(stock_date_matrix_tbl, -symbol)  # make numeric s.t. data can be clustered\nkmeans_obj <- kmeans(stock_date_matrix_numeric, centers = 4, nstart = 20)  # cluster\n\nbroom::tidy(kmeans_obj)\n\n\n\n  \n\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nbroom::glance(kmeans_obj)"
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_ml_fund.html#step-4---find-the-optimal-value-of-k",
    "title": "Machine learning Fundamentals",
    "section": "5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\ncenters_tbl <- tibble(centers = 1:30)\n\n# purr map() for iteration\nk_means_mapped_tbl <- centers_tbl %>%\n  mutate(k_means = centers %>% map(kmeans_mapper)) %>%\n  mutate(glance  = k_means %>% map(glance))\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_glance_tbl <- unnest(k_means_mapped_tbl, glance)\n\n\nbroom::augment(kmeans_obj, stock_date_matrix_tbl) %>%\n  select(symbol, .cluster)\n\n\n\n  \n\n\n# Create a scree plot\nggplot(k_means_glance_tbl, aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_bw() +\n  geom_point(color = \"#2DC6D6\", size = 4) +\n  geom_line(color = \"#2DC6D6\", size = 1) +\n  # Add labels (which are repelled a little)\n  ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n  \n  # Formatting\n  labs(title = \"Skree Plot\",\n       subtitle = \"Measures the distance from the closest K-Means center\",\n       caption = \"Conclusion: Based on the Scree Plot, we select 4 clusters to segment.\")\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-5---apply-umap",
    "href": "content/01_journal/01_ml_fund.html#step-5---apply-umap",
    "title": "Machine learning Fundamentals",
    "section": "5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\nstock_date_matrix_numeric <- select(stock_date_matrix_tbl, -symbol)\numap_results <- umap(stock_date_matrix_numeric)\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <-  umap_results$layout %>%\n  as_tibble(.name_repair = \"unique\") %>%\n  set_names(c(\"V1\", \"V2\")) %>%\n  bind_cols(stock_date_matrix_tbl %>% select(symbol)) \n\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %>%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_ml_fund.html#step-6---combine-k-means-and-umap",
    "title": "Machine learning Fundamentals",
    "section": "5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nkmeans_10_obj <- k_means_mapped_tbl %>%\n  pull(k_means) %>%\n  pluck(10)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\nkmeans_10_clusters_tbl <- kmeans_10_obj %>% \n  augment(stock_date_matrix_tbl) %>%\n  # Select the data we need\n  select(symbol, .cluster)\n\n# Bind data together\numap_kmeans_10_results_tbl <- umap_results_tbl %>%\n  left_join(kmeans_10_clusters_tbl, by = \"symbol\") %>% \n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_10_results_tbl %>%\n  mutate(label_text = str_glue(\"Symbol: {symbol}\n                                 Cluster: {.cluster}\")) %>%\n  \n  ggplot(aes(V1, V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  # Geometries\n  geom_label_repel(aes(label = label_text), size = 2, fill = \"#282A36\") +\n  # Formatting\n  labs(title = \"UMAP Projection\",\n       subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\",\n       caption = \"Conclusion: 10 Symbols identified using 2 algorithms\") +\n  theme(legend.position = \"none\")\n\n#> Warning: ggrepel: 502 unlabeled data points (too many overlaps). Consider\n#> increasing max.overlaps"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  }
]